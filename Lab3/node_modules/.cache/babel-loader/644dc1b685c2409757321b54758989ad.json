{"ast":null,"code":"var _jsxFileName = \"/Users/dariamyagkova/Desktop/lab 3 web/lab/src/components/molecules/DropdownRow/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport styled, { css } from 'styled-components';\nimport { Typography, Flex, Button, Icon } from '../../atoms';\nimport { ReactComponent as Open } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../../assets/openDropdown.svg\";\nimport { ReactComponent as Close } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../../assets/closeDropdown.svg\"; // dropdown row will open when page scroll position is 150 px ahead of it\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TOP_OFFSET_FOR_DROPDOWN_ROW_SCROLL_OPEN = 150;\nconst StyledFlex = styled(Flex)`\n  ${({\n  theme: color\n}) => css`\n    border-bottom: 1px solid ${color.darkBlue};\n    &:nth-child(2){\n      border-top: 1px solid ${color.darkBlue};\n    }\n  `}\n`;\n_c = StyledFlex;\nconst SizedTypography = styled(Typography)`\n  ${() => css`\n    width: 80%;\n  `}\n`;\n_c2 = SizedTypography;\nconst StyledDiv = styled.div`\n  ${() => css`\n    width: 100%;\n    opacity: 0;\n    transition: opacity 0.8s;\n  `}\n`;\n_c3 = StyledDiv;\n\nconst DropdownRow = ({\n  title,\n  children,\n  typeOfHeading,\n  withRowOpeningOnScroll,\n  isOpenedByDefault = false\n}) => {\n  _s();\n\n  const [isRowOpen, setIsRowOpen] = useState(isOpenedByDefault);\n  const [currentScrollPosition, setScrollPosition] = useState(window.scrollY); // save this value in state so the dropdown row could be opened with scroll only once\n\n  const [wasRowOpenedThroughScroll, setWasRowOpenedThroughScroll] = useState(false);\n  const currentRowPosition = useRef(null);\n  useEffect(() => {\n    if (withRowOpeningOnScroll) {\n      const handleScroll = () => {\n        setScrollPosition(Math.round(window.scrollY));\n      };\n\n      window.addEventListener('scroll', handleScroll);\n      return () => {\n        window.removeEventListener('scroll', handleScroll);\n      };\n    }\n  }, []);\n  useEffect(() => {\n    const {\n      top: rowTopCoords,\n      bottom: rowBottomCoords\n    } = getRowCoords();\n    const isPageScrollAtTheCurrentRow = currentScrollPosition > rowTopCoords && currentScrollPosition < rowBottomCoords;\n    const shouldRowBeOpenedByScroll = isPageScrollAtTheCurrentRow && withRowOpeningOnScroll && !wasRowOpenedThroughScroll;\n\n    if (shouldRowBeOpenedByScroll) {\n      setIsRowOpen(true);\n      setWasRowOpenedThroughScroll(true);\n    }\n  }, [currentScrollPosition]);\n\n  const toggleRow = () => {\n    setIsRowOpen(!isRowOpen);\n  };\n\n  const getRowCoords = () => {\n    const box = currentRowPosition.current.getBoundingClientRect();\n    return {\n      top: Math.round(box.top + pageYOffset) - TOP_OFFSET_FOR_DROPDOWN_ROW_SCROLL_OPEN,\n      bottom: Math.round(box.bottom + pageYOffset)\n    };\n  };\n\n  const renderHeading = typeOfHeading => {\n    switch (typeOfHeading) {\n      case 'WeDoHeading':\n        return /*#__PURE__*/_jsxDEV(SizedTypography, {\n          family: \"sauceSans\",\n          color: \"darkBlue\",\n          paddingY: \"xl5\",\n          size: \"xl\",\n          transform: \"uppercase\",\n          lineHeight: \"sm\",\n          onClick: toggleRow,\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this);\n\n      case 'AboutHeading':\n        return /*#__PURE__*/_jsxDEV(Typography, {\n          family: \"sauceSans\",\n          color: \"darkBlue\",\n          paddingY: \"xl4\",\n          size: \"md\",\n          transform: \"uppercase\",\n          onClick: toggleRow,\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this);\n\n      default:\n        return null;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(StyledFlex, {\n    ref: currentRowPosition,\n    children: /*#__PURE__*/_jsxDEV(Flex, {\n      justifyBetween: true,\n      wrapFlex: true,\n      children: [renderHeading(typeOfHeading), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: toggleRow,\n        children: /*#__PURE__*/_jsxDEV(Icon, {\n          SVG: isRowOpen ? Close : Open,\n          width: \"40\",\n          height: \"40\",\n          marginTop: \"xs\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StyledDiv, {\n        style: isRowOpen ? {\n          opacity: '1'\n        } : {},\n        children: isRowOpen ? children : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DropdownRow, \"5EoAyu7Jm3wvcfZ1e7azlwZjwi4=\");\n\n_c4 = DropdownRow;\nexport default DropdownRow;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"StyledFlex\");\n$RefreshReg$(_c2, \"SizedTypography\");\n$RefreshReg$(_c3, \"StyledDiv\");\n$RefreshReg$(_c4, \"DropdownRow\");","map":{"version":3,"sources":["/Users/dariamyagkova/Desktop/lab 3 web/lab/src/components/molecules/DropdownRow/index.js"],"names":["React","useState","useRef","useEffect","styled","css","Typography","Flex","Button","Icon","TOP_OFFSET_FOR_DROPDOWN_ROW_SCROLL_OPEN","StyledFlex","theme","color","darkBlue","SizedTypography","StyledDiv","div","DropdownRow","title","children","typeOfHeading","withRowOpeningOnScroll","isOpenedByDefault","isRowOpen","setIsRowOpen","currentScrollPosition","setScrollPosition","window","scrollY","wasRowOpenedThroughScroll","setWasRowOpenedThroughScroll","currentRowPosition","handleScroll","Math","round","addEventListener","removeEventListener","top","rowTopCoords","bottom","rowBottomCoords","getRowCoords","isPageScrollAtTheCurrentRow","shouldRowBeOpenedByScroll","toggleRow","box","current","getBoundingClientRect","pageYOffset","renderHeading","Close","Open","opacity"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport styled, {css} from 'styled-components';\nimport { Typography, Flex, Button, Icon } from '../../atoms';\nimport { ReactComponent as Open } from '../../../assets/openDropdown.svg';\nimport { ReactComponent as Close } from '../../../assets/closeDropdown.svg';\n\n// dropdown row will open when page scroll position is 150 px ahead of it\nconst TOP_OFFSET_FOR_DROPDOWN_ROW_SCROLL_OPEN = 150;\n\nconst StyledFlex = styled(Flex)`\n  ${({theme: color}) => css`\n    border-bottom: 1px solid ${color.darkBlue};\n    &:nth-child(2){\n      border-top: 1px solid ${color.darkBlue};\n    }\n  `}\n`;\n\nconst SizedTypography = styled(Typography)`\n  ${() => css`\n    width: 80%;\n  `}\n`;\n\nconst StyledDiv = styled.div`\n  ${() => css`\n    width: 100%;\n    opacity: 0;\n    transition: opacity 0.8s;\n  `}\n`;\n\nconst DropdownRow = ({\n  title, \n  children, \n  typeOfHeading, \n  withRowOpeningOnScroll,\n  isOpenedByDefault = false,\n}) => {\n  const [isRowOpen, setIsRowOpen] = useState(isOpenedByDefault);\n  const [currentScrollPosition, setScrollPosition] = useState(window.scrollY);\n  // save this value in state so the dropdown row could be opened with scroll only once\n  const [wasRowOpenedThroughScroll, setWasRowOpenedThroughScroll] = useState(false);\n\n  const currentRowPosition = useRef(null);\n\n  useEffect(() => {\n    if (withRowOpeningOnScroll) {\n      const handleScroll = () => {\n        setScrollPosition(Math.round(window.scrollY));\n      };\n\n      window.addEventListener('scroll', handleScroll);\n      \n      return () => {\n        window.removeEventListener('scroll', handleScroll);\n      }\n    }\n  }, []);\n\n  useEffect(() => {\n    const { \n        top: rowTopCoords, \n        bottom: rowBottomCoords \n    } = getRowCoords();\n\n    const isPageScrollAtTheCurrentRow = currentScrollPosition > rowTopCoords \n      && currentScrollPosition < rowBottomCoords\n\n    const shouldRowBeOpenedByScroll = isPageScrollAtTheCurrentRow \n      && withRowOpeningOnScroll\n      && !wasRowOpenedThroughScroll;\n\n    if (shouldRowBeOpenedByScroll) {\n      setIsRowOpen(true);\n      setWasRowOpenedThroughScroll(true);\n    }\n  }, [currentScrollPosition]);\n\n  const toggleRow = () => {\n    setIsRowOpen(!isRowOpen);\n  }\n\n  const getRowCoords = () => {\n    const box = currentRowPosition.current.getBoundingClientRect();\n    return ({\n      top: Math.round(box.top + pageYOffset) - TOP_OFFSET_FOR_DROPDOWN_ROW_SCROLL_OPEN,\n      bottom: Math.round(box.bottom + pageYOffset),\n    })\n  };\n\n  const renderHeading = (typeOfHeading) => {\n    switch(typeOfHeading) {\n      case 'WeDoHeading': \n        return (\n          <SizedTypography \n            family='sauceSans' \n            color='darkBlue' \n            paddingY='xl5' \n            size='xl' \n            transform='uppercase' \n            lineHeight='sm'\n            onClick={toggleRow}\n          >\n          {title}\n        </SizedTypography>);\n      case 'AboutHeading':\n        return (\n          <Typography \n            family='sauceSans' \n            color='darkBlue' \n            paddingY='xl4' \n            size='md' \n            transform='uppercase'\n            onClick={toggleRow}\n          >\n          {title}\n        </Typography>\n        );\n      default: \n        return null;\n    }\n  }\n\n  return (\n    <StyledFlex ref={currentRowPosition}  >\n      <Flex justifyBetween wrapFlex >\n        {renderHeading(typeOfHeading)}\n        <Button onClick={toggleRow}>\n          <Icon \n            SVG={isRowOpen? Close : Open} \n            width='40' \n            height='40' \n            marginTop='xs'\n          />\n        </Button>\n          <StyledDiv style={isRowOpen ? ({opacity: '1'}) : ({})}>\n            { isRowOpen ? children : null}\n          </StyledDiv>\n      </Flex>\n    </StyledFlex>\n    )\n};\n\nexport default DropdownRow;"]},"metadata":{},"sourceType":"module"}