{"ast":null,"code":"var _jsxFileName = \"/Users/dariamyagkova/Desktop/lab 3 web/lab/src/pages/components/NumberProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const NumberContext = /*#__PURE__*/React.createContext();\n\nconst NumberProvider = props => {\n  _s();\n\n  const [number, setNumber] = useState('');\n  const [storedNumber, setStoredNumber] = useState('');\n  const [functionType, setFunctionType] = useState('');\n\n  const handleSetDisplayValue = num => {\n    if ((!number.includes('.') || num !== '.') && number.length < 8) {\n      setNumber(`${(number + num).replace(/^0+/, '')}`);\n    }\n  };\n\n  const handleSetStoredValue = () => {\n    setStoredNumber(number);\n    setNumber('');\n  };\n\n  const handleClearValue = () => {\n    setNumber('');\n    setStoredNumber('');\n    setFunctionType('');\n  };\n\n  const handleBackButton = () => {\n    if (number !== '') {\n      const deletedNumber = number.slice(0, number.length - 1);\n      setNumber(deletedNumber);\n    }\n  };\n\n  const handleSetCalcFunction = type => {\n    if (number) {\n      setFunctionType(type);\n      handleSetStoredValue();\n    }\n\n    if (storedNumber) {\n      setFunctionType(type);\n    }\n  };\n\n  const handleToggleNegative = () => {\n    if (number) {\n      if (number > 0) {\n        setNumber(`-${number}`);\n      } else {\n        const positiveNumber = number.slice(1);\n        setNumber(positiveNumber);\n      }\n    } else if (storedNumber > 0) {\n      setStoredNumber(`-${storedNumber}`);\n    } else {\n      const positiveNumber = storedNumber.slice(1);\n      setStoredNumber(positiveNumber);\n    }\n  };\n\n  const doMath = () => {\n    if (number && storedNumber) {\n      switch (functionType) {\n        case '+':\n          setStoredNumber(`${Math.round(`${(parseFloat(storedNumber) + parseFloat(number)) * 100}`) / 100}`);\n          break;\n\n        case '-':\n          setStoredNumber(`${Math.round(`${(parseFloat(storedNumber) - parseFloat(number)) * 1000}`) / 1000}`);\n          break;\n\n        case '/':\n          setStoredNumber(`${Math.round(`${parseFloat(storedNumber) / parseFloat(number) * 1000}`) / 1000}`);\n          break;\n\n        case '*':\n          setStoredNumber(`${Math.round(`${parseFloat(storedNumber) * parseFloat(number) * 1000}`) / 1000}`);\n          break;\n\n        default:\n          break;\n      }\n\n      setNumber('');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(NumberContext.Provider, {\n    value: {\n      doMath,\n      functionType,\n      handleBackButton,\n      handleClearValue,\n      handleSetCalcFunction,\n      handleSetDisplayValue,\n      handleSetStoredValue,\n      handleToggleNegative,\n      number,\n      storedNumber,\n      setNumber\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NumberProvider, \"yrRyPFwP49r/O4g4IGEWsmlN5iY=\");\n\n_c = NumberProvider;\nexport default NumberProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"NumberProvider\");","map":{"version":3,"sources":["/Users/dariamyagkova/Desktop/lab 3 web/lab/src/pages/components/NumberProvider.js"],"names":["React","useState","NumberContext","createContext","NumberProvider","props","number","setNumber","storedNumber","setStoredNumber","functionType","setFunctionType","handleSetDisplayValue","num","includes","length","replace","handleSetStoredValue","handleClearValue","handleBackButton","deletedNumber","slice","handleSetCalcFunction","type","handleToggleNegative","positiveNumber","doMath","Math","round","parseFloat","children"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\n\nexport const NumberContext = React.createContext();\n\nconst NumberProvider = props => {\n  const [number, setNumber] = useState('');\n  const [storedNumber, setStoredNumber] = useState('');\n  const [functionType, setFunctionType] = useState('');\n\n  const handleSetDisplayValue = num => {\n    if ((!number.includes('.') || num !== '.') && number.length < 8) {\n      setNumber(`${(number + num).replace(/^0+/, '')}`);\n    }\n  };\n\n  const handleSetStoredValue = () => {\n    setStoredNumber(number);\n    setNumber('');\n  };\n\n  const handleClearValue = () => {\n    setNumber('');\n    setStoredNumber('');\n    setFunctionType('');\n  };\n\n  const handleBackButton = () => {\n    if (number !== '') {\n      const deletedNumber = number.slice(0, number.length - 1);\n      setNumber(deletedNumber);\n    }\n  };\n\n  const handleSetCalcFunction = type => {\n    if (number) {\n      setFunctionType(type);\n      handleSetStoredValue();\n    }\n    if (storedNumber) {\n      setFunctionType(type);\n    }\n  };\n\n  const handleToggleNegative = () => {\n    if (number) {\n      if (number > 0) {\n        setNumber(`-${number}`);\n      } else {\n        const positiveNumber = number.slice(1);\n        setNumber(positiveNumber);\n      }\n    } else if (storedNumber > 0) {\n      setStoredNumber(`-${storedNumber}`);\n    } else {\n      const positiveNumber = storedNumber.slice(1);\n      setStoredNumber(positiveNumber);\n    }\n  };\n\n  const doMath = () => {\n    if (number && storedNumber) {\n      switch (functionType) {\n        case '+':\n          setStoredNumber(`${Math.round(`${(parseFloat(storedNumber) + parseFloat(number)) * 100}`) / 100}`);\n          break;\n        case '-':\n          setStoredNumber(`${Math.round(`${(parseFloat(storedNumber) - parseFloat(number)) * 1000}`) / 1000}`);\n          break;\n        case '/':\n          setStoredNumber(`${Math.round(`${(parseFloat(storedNumber) / parseFloat(number)) * 1000}`) / 1000}`);\n          break;\n        case '*':\n          setStoredNumber(`${Math.round(`${parseFloat(storedNumber) * parseFloat(number) * 1000}`) / 1000}`);\n          break;\n        default:\n          break;\n      }\n      setNumber('');\n    }\n  };\n\n  return (\n    <NumberContext.Provider\n      value={{\n        doMath,\n        functionType,\n        handleBackButton,\n        handleClearValue,\n        handleSetCalcFunction,\n        handleSetDisplayValue,\n        handleSetStoredValue,\n        handleToggleNegative,\n        number,\n        storedNumber,\n        setNumber,\n      }}\n    >\n      {props.children}\n    </NumberContext.Provider>\n  );\n};\n\nexport default NumberProvider;"]},"metadata":{},"sourceType":"module"}